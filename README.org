#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:nil todo:t |:t
#+title: Design Patterns (SystemVerilog)
#+date: <2023-05-07 Sun>
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 29.0.60 (Org mode 9.7-pre)
#+cite_export:

* Introduction
** What is a Design Pattern
Cristopher alexander says, "Each patter n describe a problem which
occurs over and over again in our environment, and then describes the
core of the solution to that problem, in such a way that you can use
this solution a million times over, without over doing it the same way
twice".

Four essential elements of a pattern:
- pattern name
- problem
- solution
- consequences

**  The Catalog of Design Patterns
*** Abstract Factory
Provide an interface for creating families of related or dependent
objects without specifying their concrete classes.

*** Adapter
Convert the interface of a class into another interface clients
expect.

*** Bridge
Decouple an abstraction from its implementation so that they two can
very independently.

*** Builder
Separate the construction of a complex object from its representation
os that the same construction process can create different
representations.

*** Chain of Responsibility
Avoid coupling the sender of a request to its receiver by giving more
than one object a chance to handle the request. Chain the receiving
objects and pass the request along the chain until an object handles
it.

*** Command
Encapsulate a request as an object, there by letting you parameterize
clients with different requests, queue or log requests and support
undoable operations.

*** Composite
Compose objects into tree structures to represent part-whole
hierarchies. Composite lets clients treat individual objects and
compositions of objects uniformly.

*** Decorator
Attach additional responsibilities to an object dynamically.
Decorators provide a flexible alternative to sub-classing for extending
functionality.

*** Facade
Provide a unified interface to set of interfaces in subsystem. Facade
defines a higher0-level interface that makes the subsystem easier to
use.

*** Factory Method
Define an interface for creating an object, but let sub-classes decide
which class to instantiate. Factory Method lets a class defer
instantiation to sub-classes.

*** Flyweight
Use sharing to support large numbers of fine-grained objects
efficiently.

*** Interpreter
Given a language, define a representation for its grammar along with
an interpreter that uses the representation to interpret sentences in
the language.

*** Iterator
Provide a way to access the elements of an aggregate object
sequentially without exposing its underlying representation.

*** Mediator
Define an object that encapsulates how a set of objects interact.
Mediator promotes loose coupling by keeping objects from referring to
each other explicitly, and it lets you very their interaction
independently.

*** Memento
Without violating encapsulation, capture and externalize an object's
internal state so that the object can be restored to this state later.

*** Observer
Define a one-to-many dependency between objects so that when one
object changes state, all its dependents are notified an updated
automatically.

*** Prototype
Specify the kinds of objects to create using a prototypical instance,
and create new objects by copying this prototype.

*** Proxy
Provide a surrogate or placeholder for another object to control
access it.

*** Singleton
Ensure a class only has one instance, and provide a global point of
access to it.

*** State
Allow an object to alter its behavior when its internal state changes.
The object will appear to change its class.

*** Strategy
Define a family of algorithms, encapsulate each one, and make them
interchangeable. Strategy lets the algorithm very independently from
clients that use it.

*** Template Method
Define the skeleton of an algorithm in an operation, deferring some
steps to sub-classes. Template method lets sub-classes redefine
certain steps of an algorithm with out changing the algorithm's
structure.

*** Visitor
Represent an operation to be performed on the elements of an object
structure Visitor lets you define a new operation without changing the
classes of the elements on which it operates.

** Organizing the Catalog

+-------+--------+------------------+------------------+-------------------------+
|                | Purpose                                                       |
|                +------------------+------------------+-------------------------+
|                | Creational       | Structural       | Behavioral              |
+-------+--------+------------------+------------------+-------------------------+
| Scope | Class  | Factory Method   | Adapter (Class)  | Interpreter             |
|       |        |                  |                  | Template Method         |
|       +--------+------------------+------------------+-------------------------+
|       | Object | Abstract Factory | Adapter (object) | Chain of Responsibility |
|       |        +------------------+------------------+-------------------------+
|       |        | Builder          | Bridge           | Command                 |
|       |        |                  |                  |                         |
|       |        | Prototype        | Composite        | Iterator                |
|       |        |                  |                  |                         |
|       |        | Singleton        | Decorator        | Mediator                |
|       |        |                  |                  |                         |
|       |        |                  | Facade           | Memento                 |
|       |        |                  |                  |                         |
|       |        |                  | Flyweight        | Observer                |
|       |        |                  |                  |                         |
|       |        |                  | Proxy            | State                   |
|       |        |                  |                  |                         |
|       |        |                  |                  | Strategy                |
|       |        |                  |                  |                         |
|       |        |                  |                  | Visitor                 |
+-------+--------+------------------+------------------+-------------------------+

** Design aspects that design patterns can vary

| Purpose    | Design Pattern          | Aspect(s) That Can Vary                                                                    |
|------------+-------------------------+--------------------------------------------------------------------------------------------|
| Creational | Abstract Factory        | families of product objects                                                                |
|            | Builder                 | how a composite object gets created                                                        |
|            | Factory Method          | sub-class of object that is instantiated                                                   |
|            | Prototype               | class of object that is instantiated                                                       |
|            | Singleton               | the sole instance of a class                                                               |
|------------+-------------------------+--------------------------------------------------------------------------------------------|
| Structural | Adapter                 | interface to an object                                                                     |
|            | Bridge                  | implementation of an object                                                                |
|            | Composite               | structure and composition of an object                                                     |
|            | Decorator               | responsibilities of an object without sub-classing                                         |
|            | Facade                  | interface to a subsystem                                                                   |
|            | Flyweight               | storage costs of objects                                                                   |
|            | Proxy                   | how an object is accessed; its location                                                    |
|------------+-------------------------+--------------------------------------------------------------------------------------------|
| Behavioral | Chain of Responsibility | object that can fulfill a request                                                          |
|            | Command                 | when and how a request is fulfilled                                                        |
|            | Interpreter             | grammar and interpretation of a language                                                   |
|            | Iterator                | how an aggregate's elements are accessed traversed                                         |
|            | Mediator                | how and which objects interact with each other                                             |
|            | Memento                 | what private information is stored outside an object, and when                             |
|            | Observer                | number of objects that depend on another object; how the dependent objects stay up to date |
|            | State                   | states of an object                                                                        |
|            | Strategy                | an algorithm                                                                               |
|            | Template Method         | steps of an algorithm                                                                      |
|            | Visitor                 | operations that can be applied to object(s) without changing their class(es)               |
|------------+-------------------------+--------------------------------------------------------------------------------------------|



* References
** Design Patterns - Elements of Reusable Object-Oriented Software
https://www.oreilly.com/library/view/design-patterns-elements/0201633612/
